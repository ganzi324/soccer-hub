plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '4.0.3'
}

ext {
	jjwtVersion = '0.12.6'
	restAssureVersion = '5.5.1'
	hamcrestVersion = '3.0'
	hashIdsVersion = '1.0.3'
	queryDslVersion = '5.0.0:jakarta'
}

group = 'com.ganzi'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	testCompileOnly {
		extendsFrom testAnnotationProcessor
	}

	asciidoctorExt

	configureEach {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// SpringBoot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:$queryDslVersion"
	annotationProcessor "com.querydsl:querydsl-apt:$queryDslVersion"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// HashId
	implementation "org.hashids:hashids:$hashIdsVersion"

	// JWT
	implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
	runtimeOnly 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

	// DataBase - MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "io.rest-assured:rest-assured:$restAssureVersion"
	testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
}

def querydslDir = 'build/generated/querydsl' as File
def snippetsDir = file('build/generated-snippets') as File
def generatedDocsDir = file("build/docs/asciidoc") as File
def outputDocsDir = file("src/main/resources/static/docs") as File


test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

asciidoctor {
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	baseDirFollowsSourceFile()
	attributes 'snippets': snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	project.delete(outputDocsDir)
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from generatedDocsDir
	into outputDocsDir
}